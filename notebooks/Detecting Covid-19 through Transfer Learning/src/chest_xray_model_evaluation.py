# -*- coding: utf-8 -*-
"""chest_Xray_model_evaluation.ipynb

Automatically generated by Colaboratory.

filename: chest_xray_model_evaluation.py
author: Supriya Sudarshan
version: 18.04.2021
description: VGG19 model for detection of Covid-19 in chest Xray's
"""

# Basic imports
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from glob import glob

from tensorflow.keras.models import Model, load_model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import sys
sys.path.append('/content/drive/MyDrive/Colab Notebooks')

# user defined
from generic_model import *

# Load data paths

covid_path = '/content/drive/MyDrive/Colab Notebooks/Data/Chest X-ray/COVID'
normal_path = '/content/drive/MyDrive/Colab Notebooks/Data/Chest X-ray/Normal'

# Use glob to grab images from path 
covid_files = glob(covid_path + '/*')
normal_files = glob(normal_path + '/*')

# process image and split it into train and test set
[X_train, X_test, y_train, y_test] = split_images_and_process(covid_files, normal_files)

# Base model: VGG19 - Flatten - FC layer (64 neurons, relu) - Dropout (0.1) - Output(2, softmax)
# Optimizer - Adam, Learning rate - 10-5 
# Loss - binary_crossentropy
# metrics - accuracy

model = vgg_model(lr=1e-5, dropout_val=0.1, fc_neurons=64)

model.summary()

# Data Augmentation on Training Set

train_aug = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)

# Batch size (bs) = 4
# Epochs = 100
# Early stopping to stop training when a 'val_loss' has stopped improving for 10 consecutive epochs.

bs = 4
epoch = 100

callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10, verbose=0)

hist = model.fit(train_aug.flow(X_train, y_train, batch_size = bs),
                    validation_data=(X_test, y_test),
                    callbacks = callback,
                    validation_steps=len(X_test) // bs,
                    steps_per_epoch=len(X_train) // bs,
                    epochs = epoch)

plot_model_acc_loss(history = hist, title = 'Chest X-ray Covid Vs Normal')

model.save('/content/drive/MyDrive/Colab Notebooks/saved_models/chest_xray_vggmodel.h5')

# Evaluation

y_pred = model.predict(X_test, batch_size = bs)

# visualizing 3 predictions

prediction=y_pred[0:3]

for index, probability in enumerate(prediction):
  if probability[1] > 0.5:
        plt.title('%.2f' % (probability[1]*100) + '% COVID')
  else:
        plt.title('%.2f' % ((1-probability[1])*100) + '% Normal')
  plt.imshow(X_test[index])
  plt.show()

# Convert to Binary classes
y_pred_bin = np.argmax(y_pred, axis=1)
y_test_bin = np.argmax(y_test, axis=1)

print('Evaluating model for Chest X-ray Images\n')
plot_confusion_matrix(['COVID','NO_FINDING'],y_test_bin, y_pred_bin)
report(y_test_bin, y_pred_bin)

"""For a dataset consisting of 505 Normal and 435 Covid images:

Covid: Precision = 0.86, Recall = 0.89, F1 Score = 0.87  
Normal: Precision = 0.90, Recall = 0.87, F1 Score = 0.88  

Average F1 Score: 0.88

Confusion matrix: [[77, 10][13, 88]]
"""



"""As per the paper for 400 Normal and 329 Covid findings:

Covid : Precision = 0.85, Recall = 0.83, F1 Score = 0.84  
Normal: Precision = 0.86, Recall = 0.88, F1 Score = 0.87  

Average F1 score: 0.87  

Confusion matrix: [[55, 11]
                    [10, 70]]
"""

